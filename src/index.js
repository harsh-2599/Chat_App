const express = require('express')
const path = require('path')
const http = require('http')
const {generateMessage,generateLocation} = require('../src/utils/messages')
const socketio = require('socket.io')
const Filter = require('bad-words')
const {getUser, addUser , getUsersInRoom , removeUser} = require('./utils/users')

const app = express() // Starting the express server
const server = http.createServer(app) // Creating http server
const io = socketio(server) 

const port = process.env.PORT || 3000 // Initializing port value
const publicDirectoryPath = path.join(__dirname,'../public') // Public path
app.use(express.static(publicDirectoryPath)) //App uses all files in this directory


io.on('connection',(socket)=>{ // Connection to socket is on
    console.log('New Web socket connection')
    
    socket.on('join',({username,room},callback)=>{ // When user want to join a room
        //adduser function adds a user into the room
        const {error,user} = addUser ({id : socket.id, username, room})
        if(error){
            return callback(error)
        }

        socket.join(user.room) // Room is connected to socket for communication
        // Message is emitted to other
        // Message is generated by providing sender,message and time of creation
        socket.emit('message',generateMessage('Admin','Welcome')) 
        
        // Message is sent to all other user in the room 
        socket.broadcast.to(user.room).emit('message',generateMessage('Admin',`${user.username} has joined`))
        
        //Message is sent to all the users of the room
        io.to(user.room).emit('roomData',{
            room : user.room,
            // This function gives username of all the users in the room.
            users : getUsersInRoom(user.room)
        })
        callback()
    })

    // When joined user wants to send a message in the room
    socket.on('sendMessage',(message,callback)=>{
        // User is fetched using unique socket id 
        const user = getUser(socket.id)

        // Messages are filtered. If bad words are used message is not sent.
        const filter = new Filter()
        if(filter.isProfane(message)){
            return callback('Profaned Message')
        }
        //Sent to all the users in the room 
        io.to(user.room).emit('message',generateMessage(user.username,message))
        callback()
    })

    // When joined user want to send his current location 
    socket.on('sendLocation',(coords,callback)=>{
        // User is fetched using unique socket id
        const user = getUser(socket.id)

        // Sent to all the users in the room
        io.to(user.room).emit('locationMessage',generateLocation(user.username,`https://google.com/maps?q=${coords.lat},${coords.long}`))
        callback()
    })

    socket.on('disconnect',()=>{
        // REmoves user from room, fetched by socket id
        const user = removeUser(socket.id)

        if(user){
            // Message sent to all in room indicating user has left
            io.to(user.room).emit('message',generateMessage('Admin',`${user.username} has left`))
            // Message sent to all in room about who are present in the room 
            io.to(user.room).emit('roomData',{
                room : user.room,
                users : getUsersInRoom(user.room)
            })
        }
    })
})

// Server is connected to the specified port
server.listen(port,()=>{
    console.log("Successfully connected to port:"+ port)
})